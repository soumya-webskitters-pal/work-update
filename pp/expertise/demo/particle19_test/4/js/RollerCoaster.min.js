function RollerCoasterGeometry(e,t){THREE.BufferGeometry.call(this);var r=[],o=[],a=[],n=[1,1,1],p=[1,1,0],E=new THREE.Vector3(0,1,0),y=new THREE.Vector3,u=new THREE.Vector3,s=new THREE.Quaternion,c=new THREE.Quaternion;c.setFromAxisAngle(E,Math.PI/2);var i=new THREE.Vector3,h=new THREE.Vector3;h.copy(e.getPointAt(0));for(var l=[new THREE.Vector3(-.225,0,0),new THREE.Vector3(0,-.05,0),new THREE.Vector3(0,-.175,0),new THREE.Vector3(0,-.05,0),new THREE.Vector3(.225,0,0),new THREE.Vector3(0,-.175,0)],R=2*Math.PI,d=5,T=[],w=0;w<d;w++){var H=w/d*R;T.push(new THREE.Vector3(.06*Math.sin(H),.06*Math.cos(H),0))}d=6;var f=[];for(w=0;w<d;w++){H=w/d*R;f.push(new THREE.Vector3(.025*Math.sin(H),.025*Math.cos(H),0))}var V=new THREE.Vector3,z=new THREE.Vector3;function m(e,t){z.set(0,0,-1).applyQuaternion(s);for(var n=0;n<e.length;n++)V.copy(e[n]),V.applyQuaternion(s),V.add(i),r.push(V.x,V.y,V.z),o.push(z.x,z.y,z.z),a.push(t[0],t[1],t[2]);z.set(0,0,1).applyQuaternion(s);for(n=e.length-1;n>=0;n--)V.copy(e[n]),V.applyQuaternion(s),V.add(i),r.push(V.x,V.y,V.z),o.push(z.x,z.y,z.z),a.push(t[0],t[1],t[2])}var A=new THREE.Vector3,x=new THREE.Vector3,Q=new THREE.Vector3,M=new THREE.Vector3,v=new THREE.Vector3,b=new THREE.Vector3,G=new THREE.Vector3,B=new THREE.Vector3;function g(e,t,n){for(var p=0,E=e.length;p<E;p++){var y=e[p],u=e[(p+1)%E];A.copy(y).add(t),A.applyQuaternion(s),A.add(i),x.copy(u).add(t),x.applyQuaternion(s),x.add(i),Q.copy(u).add(t),Q.applyQuaternion(c),Q.add(h),M.copy(y).add(t),M.applyQuaternion(c),M.add(h),r.push(A.x,A.y,A.z),r.push(x.x,x.y,x.z),r.push(M.x,M.y,M.z),r.push(x.x,x.y,x.z),r.push(Q.x,Q.y,Q.z),r.push(M.x,M.y,M.z),v.copy(y),v.applyQuaternion(s),v.normalize(),b.copy(u),b.applyQuaternion(s),b.normalize(),G.copy(u),G.applyQuaternion(c),G.normalize(),B.copy(y),B.applyQuaternion(c),B.normalize(),o.push(v.x,v.y,v.z),o.push(b.x,b.y,b.z),o.push(B.x,B.y,B.z),o.push(b.x,b.y,b.z),o.push(G.x,G.y,G.z),o.push(B.x,B.y,B.z),a.push(n[0],n[1],n[2]),a.push(n[0],n[1],n[2]),a.push(n[0],n[1],n[2]),a.push(n[0],n[1],n[2]),a.push(n[0],n[1],n[2]),a.push(n[0],n[1],n[2])}}var F=new THREE.Vector3;for(w=1;w<=t;w++){i.copy(e.getPointAt(w/t)),E.set(0,1,0),y.subVectors(i,h).normalize(),u.crossVectors(E,y).normalize(),E.crossVectors(y,u);H=Math.atan2(y.x,y.z);s.setFromAxisAngle(E,H),w%2==0&&m(l,p),g(T,F.set(0,-.125,0),p),g(f,F.set(.2,0,0),n),g(f,F.set(-.2,0,0),n),h.copy(i),c.copy(s)}this.addAttribute("position",new THREE.BufferAttribute(new Float32Array(r),3)),this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(o),3)),this.addAttribute("color",new THREE.BufferAttribute(new Float32Array(a),3))}function RollerCoasterLiftersGeometry(e,t){THREE.BufferGeometry.call(this);var r=[],o=[],a=new THREE.Quaternion,n=new THREE.Vector3(0,1,0),p=new THREE.Vector3,E=new THREE.Vector3,y=[new THREE.Vector3(0,.05,-.05),new THREE.Vector3(0,.05,.05),new THREE.Vector3(0,-.05,0)],u=[new THREE.Vector3(-.05,0,.05),new THREE.Vector3(-.05,0,-.05),new THREE.Vector3(.05,0,0)],s=[new THREE.Vector3(.05,0,-.05),new THREE.Vector3(.05,0,.05),new THREE.Vector3(-.05,0,0)],c=new THREE.Vector3,i=new THREE.Vector3,h=new THREE.Vector3,l=new THREE.Vector3,R=new THREE.Vector3,d=new THREE.Vector3,T=new THREE.Vector3,w=new THREE.Vector3;function H(e,t,n){for(var p=0,E=e.length;p<E;p++){var y=e[p],u=e[(p+1)%E];c.copy(y),c.applyQuaternion(a),c.add(t),i.copy(u),i.applyQuaternion(a),i.add(t),h.copy(u),h.applyQuaternion(a),h.add(n),l.copy(y),l.applyQuaternion(a),l.add(n),r.push(c.x,c.y,c.z),r.push(i.x,i.y,i.z),r.push(l.x,l.y,l.z),r.push(i.x,i.y,i.z),r.push(h.x,h.y,h.z),r.push(l.x,l.y,l.z),R.copy(y),R.applyQuaternion(a),R.normalize(),d.copy(u),d.applyQuaternion(a),d.normalize(),T.copy(u),T.applyQuaternion(a),T.normalize(),w.copy(y),w.applyQuaternion(a),w.normalize(),o.push(R.x,R.y,R.z),o.push(d.x,d.y,d.z),o.push(w.x,w.y,w.z),o.push(d.x,d.y,d.z),o.push(T.x,T.y,T.z),o.push(w.x,w.y,w.z)}}for(var f=new THREE.Vector3,V=new THREE.Vector3,z=1;z<=t;z++){p.copy(e.getPointAt(z/t)),E.copy(e.getTangentAt(z/t));var m=Math.atan2(E.x,E.z);a.setFromAxisAngle(n,m),p.y>10?(f.set(-.75,-.35,0),f.applyQuaternion(a),f.add(p),V.set(.75,-.35,0),V.applyQuaternion(a),V.add(p),H(y,f,V),f.set(-.7,-.3,0),f.applyQuaternion(a),f.add(p),V.set(-.7,-p.y,0),V.applyQuaternion(a),V.add(p),H(u,f,V),f.set(.7,-.3,0),f.applyQuaternion(a),f.add(p),V.set(.7,-p.y,0),V.applyQuaternion(a),V.add(p),H(s,f,V)):(f.set(0,-.2,0),f.applyQuaternion(a),f.add(p),V.set(0,-p.y,0),V.applyQuaternion(a),V.add(p),H(s,f,V))}this.addAttribute("position",new THREE.BufferAttribute(new Float32Array(r),3)),this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(o),3))}function RollerCoasterShadowGeometry(e,t){THREE.BufferGeometry.call(this);var r=[],o=new THREE.Vector3(0,1,0),a=new THREE.Vector3,n=new THREE.Quaternion,p=new THREE.Quaternion;p.setFromAxisAngle(o,Math.PI/2);var E=new THREE.Vector3,y=new THREE.Vector3;y.copy(e.getPointAt(0)),y.y=0;for(var u=new THREE.Vector3,s=new THREE.Vector3,c=new THREE.Vector3,i=new THREE.Vector3,h=1;h<=t;h++){E.copy(e.getPointAt(h/t)),E.y=0,a.subVectors(E,y);var l=Math.atan2(a.x,a.z);n.setFromAxisAngle(o,l),u.set(-.3,0,0),u.applyQuaternion(n),u.add(E),s.set(.3,0,0),s.applyQuaternion(n),s.add(E),c.set(.3,0,0),c.applyQuaternion(p),c.add(y),i.set(-.3,0,0),i.applyQuaternion(p),i.add(y),r.push(u.x,u.y,u.z),r.push(s.x,s.y,s.z),r.push(i.x,i.y,i.z),r.push(s.x,s.y,s.z),r.push(c.x,c.y,c.z),r.push(i.x,i.y,i.z),y.copy(E),p.copy(n)}this.addAttribute("position",new THREE.BufferAttribute(new Float32Array(r),3))}function SkyGeometry(){THREE.BufferGeometry.call(this);for(var e=[],t=0;t<100;t++){var r=800*Math.random()-400,o=50*Math.random()+50,a=800*Math.random()-400,n=40*Math.random()+20;e.push(r-n,o,a-n),e.push(r+n,o,a-n),e.push(r-n,o,a+n),e.push(r+n,o,a-n),e.push(r+n,o,a+n),e.push(r-n,o,a+n)}this.addAttribute("position",new THREE.BufferAttribute(new Float32Array(e),3))}function TreesGeometry(e){THREE.BufferGeometry.call(this);var t=[],r=[],o=new THREE.Raycaster;o.ray.direction.set(0,-1,0);for(var a=0;a<2e3;a++){var n=500*Math.random()-250,p=500*Math.random()-250;o.ray.origin.set(n,50,p);var E=o.intersectObject(e);if(0!==E.length){var y=E[0].point.y,u=5*Math.random()+.5,s=Math.random()*Math.PI*2;t.push(n+Math.sin(s),y,p+Math.cos(s)),t.push(n,y+u,p),t.push(n+Math.sin(s+Math.PI),y,p+Math.cos(s+Math.PI)),s+=Math.PI/2,t.push(n+Math.sin(s),y,p+Math.cos(s)),t.push(n,y+u,p),t.push(n+Math.sin(s+Math.PI),y,p+Math.cos(s+Math.PI));for(var c=.1*Math.random(),i=0;i<6;i++)r.push(.2+c,.4+c,0)}}this.addAttribute("position",new THREE.BufferAttribute(new Float32Array(t),3)),this.addAttribute("color",new THREE.BufferAttribute(new Float32Array(r),3))}RollerCoasterGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),RollerCoasterLiftersGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),RollerCoasterShadowGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),SkyGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),TreesGeometry.prototype=Object.create(THREE.BufferGeometry.prototype);